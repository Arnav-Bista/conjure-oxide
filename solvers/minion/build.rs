// adapted from
// https://github.com/gokberkkocak/rust_glucose/blob/master/build.rs
// and
// 1https://rust-lang.github.io/rust-bindgen/non-system-libraries.html

use glob::glob;
use std::env;
use std::path::PathBuf;
use std::process::Command;

fn main() {
    vendor_configure();
    bind();
    build();
}

fn vendor_configure() {
    // ./configure.py generates cpp and h files to /vendor/build.
    Command::new("bash")
        .args(["prebuild.sh"])
        .output()
        .expect("Failed to run prebuild.sh");
}

fn bind() {
    // The bindgen::Builder is the main entry point
    // to bindgen, and lets you build up options for
    // the resulting bindings.
    let bindings = bindgen::Builder::default()
        // The input header we would like to generate
        // bindings for.
        .header("vendor/minion/minion.h")
        // Tell cargo to invalidate the built crate whenever any of the
        // included header files changed.
        .parse_callbacks(Box::new(bindgen::CargoCallbacks))
        // Must manually give allow list to stop bindgen accidentally binding something complicated
        // in C++ stdlib that will make it crash.
        .allowlist_var("MinionVersion")
        .allowlist_function("minion_main")
        .clang_arg("-Ivendor/build/src/") // generated from configure.py
        .clang_arg("-Ivendor/minion/")
        .clang_arg(r"--std=gnu++11")
        .clang_arg(r"-xc++")
        // Finish the builder and generate the bindings.
        .generate()
        // Unwrap the Result and panic on failure.
        .expect("Unable to generate bindings");

    // Write the bindings to the $OUT_DIR/bindings.rs file.
    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    bindings
        .write_to_file(out_path.join("bindings.rs"))
        .expect("Couldn't write bindings!");
}

fn build() {
    let mut binding = cc::Build::new();
    let mut builder = binding
        .include("vendor/minion")
        .include("vendor/build/src")
        .cpp(true)
        // vendor/minion
        .file("vendor/minion/minion.cpp")
        .file("vendor/minion/help/help.cpp")
        .file("vendor/minion/inputfile_parse/inputfile_parse.cpp")
        .file("vendor/minion/system/sha1.cpp")
        .file("vendor/minion/system/trigger_timer.cpp")
        .file("vendor/minion/BuildCSP.cpp")
        .file("vendor/minion/BuildVariables.cpp")
        .file("vendor/minion/command_search.cpp")
        .file("vendor/minion/commandline_parse.cpp")
        .file("vendor/minion/debug_functions.cpp")
        .file("vendor/minion/dump_state.cpp")
        .file("vendor/minion/get_info.cpp")
        .file("vendor/minion/globals.cpp")
        .file("vendor/minion/info_dumps.cpp")
        .file("vendor/minion/parallel.cpp")
        .file("vendor/minion/preprocess.cpp")
        .file("vendor/minion/search_dump.cpp")
        .file("vendor/minion/search_dump_sql.cpp");

    // Generated by configure.py
    // vendor/build
    for path in glob("vendor/build/src/*.cpp")
        .unwrap()
        .filter_map(Result::ok)
    {
        builder = builder.file(path);
    }

    builder
        .flag_if_supported("-D__STDC_LIMIT_MACROS")
        .flag_if_supported("-D__STDC_FORMAT_MACROS")
        .flag_if_supported("-DNDEBUG")
        .flag_if_supported("-fomit-frame-pointer")
        .flag_if_supported("-std=c++11")
        .flag_if_supported("-xc++")
        .flag_if_supported("-w")
        .opt_level(3)
        .compile("minion");
}
