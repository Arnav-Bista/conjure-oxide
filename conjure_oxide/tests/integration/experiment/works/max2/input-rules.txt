[1mtest_span[0m[2m:[0m hello
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "geq_to_ineq", application: 0x558bb68e6e60, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(2))), resulting in: Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(0)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "max_to_var", application: 0x558bb68e2700, rule_sets: [("Base", 100)] }, to Expression: Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), resulting in: Reference(Metadata { clean: false, etype: None }, MachineName(0))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "unwrap_nested_and", application: 0x558bb68e0a30, rule_sets: [("Base", 8800)] }, to Expression: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("x")), Sum(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))])), And(Metadata { clean: false, etype: None }, [Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])])]), resulting in: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("x")), Sum(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))])), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "sum_eq_to_sumeq", application: 0x558bb68e5d40, rule_sets: [("Minion", 4400)] }, to Expression: Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("x")), Sum(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))])), resulting in: SumEq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x")))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "sumeq_to_minion", application: 0x558bb68e62b0, rule_sets: [("Minion", 4400)] }, to Expression: SumEq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), resulting in: And(Metadata { clean: false, etype: None }, [SumGeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x")))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "unwrap_nested_and", application: 0x558bb68e0a30, rule_sets: [("Base", 8800)] }, to Expression: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), And(Metadata { clean: false, etype: None }, [SumGeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x")))]), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])]), resulting in: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), SumGeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "max_to_var", application: 0x558bb68e2700, rule_sets: [("Base", 100)] }, to Expression: Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), resulting in: Reference(Metadata { clean: false, etype: None }, MachineName(1))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "unwrap_nested_and", application: 0x558bb68e0a30, rule_sets: [("Base", 8800)] }, to Expression: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), SumGeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(1)), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))]), And(Metadata { clean: false, etype: None }, [Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])])]), resulting in: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), SumGeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(1)), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))]), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "max_to_var", application: 0x558bb68e2700, rule_sets: [("Base", 100)] }, to Expression: Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), resulting in: Reference(Metadata { clean: false, etype: None }, MachineName(2))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "unwrap_nested_and", application: 0x558bb68e0a30, rule_sets: [("Base", 8800)] }, to Expression: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), SumGeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(1)), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(2)), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))]), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b")))]), And(Metadata { clean: false, etype: None }, [Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])])]), resulting in: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), SumGeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(1)), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(2)), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))]), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b")))]), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "geq_to_ineq", application: 0x558bb68e6e60, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "geq_to_ineq", application: 0x558bb68e6e60, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "geq_to_ineq", application: 0x558bb68e6e60, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, MachineName(1)), Constant(Metadata { clean: false, etype: None }, Int(0)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "geq_to_ineq", application: 0x558bb68e6e60, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, MachineName(1)), Constant(Metadata { clean: false, etype: None }, Int(0)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "geq_to_ineq", application: 0x558bb68e6e60, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, MachineName(2)), Constant(Metadata { clean: false, etype: None }, Int(0)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "geq_to_ineq", application: 0x558bb68e6e60, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, MachineName(2)), Constant(Metadata { clean: false, etype: None }, Int(0)))
