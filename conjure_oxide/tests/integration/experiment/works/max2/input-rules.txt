Event { fields: ValueSet { message: trace test, callsite: Identifier(0x105694018) }, metadata: Metadata { name: "event conjure_oxide/tests/generated_tests.rs:87", target: "rule_engine", level: Level(Trace), module_path: "generated_tests", location: conjure_oxide/tests/generated_tests.rs:87, fields: {message}, callsite: Identifier(0x105694018), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "geq_to_ineq", application: 0x104f3b9ac, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(2))), resulting in: Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(0))), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "max_to_var", application: 0x104f3857c, rule_sets: [("Base", 100)] }, to Expression: Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), resulting in: Reference(Metadata { clean: false, etype: None }, MachineName(0)), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "unwrap_nested_and", application: 0x104f36ed0, rule_sets: [("Base", 8800)] }, to Expression: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("x")), Sum(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))])), And(Metadata { clean: false, etype: None }, [Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])])]), resulting in: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("x")), Sum(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))])), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])]), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "sum_eq_to_sumeq", application: 0x104f3ad2c, rule_sets: [("Minion", 4400)] }, to Expression: Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("x")), Sum(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))])), resulting in: SumEq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "sumeq_to_minion", application: 0x104f3b12c, rule_sets: [("Minion", 4400)] }, to Expression: SumEq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), resulting in: And(Metadata { clean: false, etype: None }, [SumGeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x")))]), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "unwrap_nested_and", application: 0x104f36ed0, rule_sets: [("Base", 8800)] }, to Expression: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), And(Metadata { clean: false, etype: None }, [SumGeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x")))]), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])]), resulting in: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), SumGeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])]), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "max_to_var", application: 0x104f3857c, rule_sets: [("Base", 100)] }, to Expression: Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), resulting in: Reference(Metadata { clean: false, etype: None }, MachineName(1)), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "unwrap_nested_and", application: 0x104f36ed0, rule_sets: [("Base", 8800)] }, to Expression: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), SumGeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(1)), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))]), And(Metadata { clean: false, etype: None }, [Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])])]), resulting in: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), SumGeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(1)), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))]), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])]), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "max_to_var", application: 0x104f3857c, rule_sets: [("Base", 100)] }, to Expression: Max(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), resulting in: Reference(Metadata { clean: false, etype: None }, MachineName(2)), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "unwrap_nested_and", application: 0x104f36ed0, rule_sets: [("Base", 8800)] }, to Expression: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), SumGeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(1)), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(2)), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))]), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b")))]), And(Metadata { clean: false, etype: None }, [Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])])]), resulting in: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(2)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), SumGeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(1)), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), SumLeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(2)), Constant(Metadata { clean: false, etype: None }, Int(1))], Reference(Metadata { clean: false, etype: None }, UserName("x"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))]), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b")))]), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])]), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "geq_to_ineq", application: 0x104f3b9ac, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "geq_to_ineq", application: 0x104f3b9ac, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "geq_to_ineq", application: 0x104f3b9ac, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, MachineName(1)), Constant(Metadata { clean: false, etype: None }, Int(0))), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "geq_to_ineq", application: 0x104f3b9ac, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(1)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, MachineName(1)), Constant(Metadata { clean: false, etype: None }, Int(0))), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "geq_to_ineq", application: 0x104f3b9ac, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, MachineName(2)), Constant(Metadata { clean: false, etype: None }, Int(0))), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
Event { fields: ValueSet { message: Rule applicable: Rule { name: "geq_to_ineq", application: 0x104f3b9ac, rule_sets: [("Minion", 4100)] }, to Expression: Geq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(2)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, MachineName(2)), Constant(Metadata { clean: false, etype: None }, Int(0))), callsite: Identifier(0x105694108) }, metadata: Metadata { name: "event crates/conjure_core/src/rule_engine/rewrite.rs:308", target: "rule_engine", level: Level(Trace), module_path: "conjure_core::rule_engine::rewrite", location: crates/conjure_core/src/rule_engine/rewrite.rs:308, fields: {message}, callsite: Identifier(0x105694108), kind: Kind(EVENT) }, parent: Current }
