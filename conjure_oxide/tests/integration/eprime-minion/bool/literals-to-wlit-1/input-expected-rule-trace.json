{"level":"TRACE","message":"Rule applied: \"boolean_literal_to_wliteral\", to Expression: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\")))]), Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), And(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"d\")))])]), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), Or(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"d\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))])]), resulting in: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\")))]), Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), And(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"d\")))])]), WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"b\"), Bool(true)), Or(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"d\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))])])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"boolean_literal_to_wliteral\", to Expression: Or(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\")))]), resulting in: Or(Metadata { clean: false, etype: None }, [WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"a\"), Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"b\"), Bool(true))])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"distribute_or_over_and\", to Expression: Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), And(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"d\")))])]), resulting in: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\")))]), Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"d\")))])])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"unwrap_nested_and\", to Expression: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"a\"), Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"b\"), Bool(true))]), And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\")))]), Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"d\")))])]), WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"b\"), Bool(true)), Or(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"d\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))])]), resulting in: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"a\"), Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"b\"), Bool(true))]), Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\")))]), Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"d\")))]), WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"b\"), Bool(true)), Or(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"d\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))])])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"boolean_literal_to_wliteral\", to Expression: Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\")))]), resulting in: Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"b\"), Bool(true))])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"boolean_literal_to_wliteral\", to Expression: Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), resulting in: WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"c\"), Bool(false))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"boolean_literal_to_wliteral\", to Expression: Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"d\")))]), resulting in: Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"d\"), Bool(true))])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"boolean_literal_to_wliteral\", to Expression: Not(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), resulting in: WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"c\"), Bool(false))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"boolean_literal_to_wliteral\", to Expression: Or(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"d\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))]), resulting in: Or(Metadata { clean: false, etype: None }, [WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"d\"), Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName(\"c\"), Bool(true))])","target":"rule_engine"}
