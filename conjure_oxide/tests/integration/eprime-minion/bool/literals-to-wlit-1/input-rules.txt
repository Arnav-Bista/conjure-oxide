[1mtest_span[0m[2m:[0m hello
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "boolean_literal_to_wliteral", application: 0x558bb68e91a0, rule_sets: [("Minion", 4100)] }, to Expression: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), And(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("d"))])]), Reference(Metadata { clean: false, etype: None }, UserName("b")), Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("d")), Reference(Metadata { clean: false, etype: None }, UserName("c"))])]), resulting in: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), And(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("d"))])]), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("b"), Bool(true)), Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("d")), Reference(Metadata { clean: false, etype: None }, UserName("c"))])])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "boolean_literal_to_wliteral", application: 0x558bb68e91a0, rule_sets: [("Minion", 4100)] }, to Expression: Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), resulting in: Or(Metadata { clean: false, etype: None }, [WatchedLiteral(Metadata { clean: false, etype: None }, UserName("a"), Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("b"), Bool(true))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "distribute_or_over_and", application: 0x558bb68e3410, rule_sets: [("Base", 8400)] }, to Expression: Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), And(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("d"))])]), resulting in: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), Reference(Metadata { clean: false, etype: None }, UserName("d"))])])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "unwrap_nested_and", application: 0x558bb68e0a30, rule_sets: [("Base", 8800)] }, to Expression: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [WatchedLiteral(Metadata { clean: false, etype: None }, UserName("a"), Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("b"), Bool(true))]), And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), Reference(Metadata { clean: false, etype: None }, UserName("d"))])]), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("b"), Bool(true)), Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("d")), Reference(Metadata { clean: false, etype: None }, UserName("c"))])]), resulting in: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [WatchedLiteral(Metadata { clean: false, etype: None }, UserName("a"), Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("b"), Bool(true))]), Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), Reference(Metadata { clean: false, etype: None }, UserName("d"))]), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("b"), Bool(true)), Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("d")), Reference(Metadata { clean: false, etype: None }, UserName("c"))])])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "boolean_literal_to_wliteral", application: 0x558bb68e91a0, rule_sets: [("Minion", 4100)] }, to Expression: Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), resulting in: Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("b"), Bool(true))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "boolean_literal_to_wliteral", application: 0x558bb68e91a0, rule_sets: [("Minion", 4100)] }, to Expression: Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), resulting in: WatchedLiteral(Metadata { clean: false, etype: None }, UserName("c"), Bool(false))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "boolean_literal_to_wliteral", application: 0x558bb68e91a0, rule_sets: [("Minion", 4100)] }, to Expression: Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), Reference(Metadata { clean: false, etype: None }, UserName("d"))]), resulting in: Or(Metadata { clean: false, etype: None }, [Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("d"), Bool(true))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "boolean_literal_to_wliteral", application: 0x558bb68e91a0, rule_sets: [("Minion", 4100)] }, to Expression: Not(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c"))), resulting in: WatchedLiteral(Metadata { clean: false, etype: None }, UserName("c"), Bool(false))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "boolean_literal_to_wliteral", application: 0x558bb68e91a0, rule_sets: [("Minion", 4100)] }, to Expression: Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("d")), Reference(Metadata { clean: false, etype: None }, UserName("c"))]), resulting in: Or(Metadata { clean: false, etype: None }, [WatchedLiteral(Metadata { clean: false, etype: None }, UserName("d"), Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("c"), Bool(true))])
