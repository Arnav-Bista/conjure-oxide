{"level":"TRACE","message":"Rule applied: \"flatten_nested_sum\", to Expression: Sum(Metadata { clean: false, etype: None }, [Sum(Metadata { clean: false, etype: None }, [Sum(Metadata { clean: false, etype: None }, [Sum(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Constant(Metadata { clean: false, etype: None }, Int(10))]), Constant(Metadata { clean: false, etype: None }, Int(20))]), Reference(Metadata { clean: false, etype: None }, UserName(\"y\"))]), Constant(Metadata { clean: false, etype: None }, Int(5))]), resulting in: Sum(Metadata { clean: false, etype: None }, [Sum(Metadata { clean: false, etype: None }, [Sum(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Constant(Metadata { clean: false, etype: None }, Int(10))]), Constant(Metadata { clean: false, etype: None }, Int(20))]), Reference(Metadata { clean: false, etype: None }, UserName(\"y\")), Constant(Metadata { clean: false, etype: None }, Int(5))])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"flatten_nested_sum\", to Expression: Sum(Metadata { clean: false, etype: None }, [Sum(Metadata { clean: false, etype: None }, [Sum(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Constant(Metadata { clean: false, etype: None }, Int(10))]), Constant(Metadata { clean: false, etype: None }, Int(20))]), Reference(Metadata { clean: false, etype: None }, UserName(\"y\")), Constant(Metadata { clean: false, etype: None }, Int(5))]), resulting in: Sum(Metadata { clean: false, etype: None }, [Sum(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Constant(Metadata { clean: false, etype: None }, Int(10))]), Constant(Metadata { clean: false, etype: None }, Int(20)), Reference(Metadata { clean: false, etype: None }, UserName(\"y\")), Constant(Metadata { clean: false, etype: None }, Int(5))])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"partial_evaluator\", to Expression: Sum(Metadata { clean: false, etype: None }, [Sum(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Constant(Metadata { clean: false, etype: None }, Int(10))]), Constant(Metadata { clean: false, etype: None }, Int(20)), Reference(Metadata { clean: false, etype: None }, UserName(\"y\")), Constant(Metadata { clean: false, etype: None }, Int(5))]), resulting in: Sum(Metadata { clean: false, etype: None }, [Sum(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Constant(Metadata { clean: false, etype: None }, Int(10))]), Reference(Metadata { clean: false, etype: None }, UserName(\"y\")), Constant(Metadata { clean: false, etype: None }, Int(25))])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"flatten_nested_sum\", to Expression: Sum(Metadata { clean: false, etype: None }, [Sum(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Constant(Metadata { clean: false, etype: None }, Int(10))]), Reference(Metadata { clean: false, etype: None }, UserName(\"y\")), Constant(Metadata { clean: false, etype: None }, Int(25))]), resulting in: Sum(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Constant(Metadata { clean: false, etype: None }, Int(10)), Reference(Metadata { clean: false, etype: None }, UserName(\"y\")), Constant(Metadata { clean: false, etype: None }, Int(25))])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"sum_eq_to_sumeq\", to Expression: Eq(Metadata { clean: false, etype: None }, Sum(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Constant(Metadata { clean: false, etype: None }, Int(10)), Reference(Metadata { clean: false, etype: None }, UserName(\"y\")), Constant(Metadata { clean: false, etype: None }, Int(25))]), Constant(Metadata { clean: false, etype: None }, Int(100))), resulting in: SumEq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Constant(Metadata { clean: false, etype: None }, Int(10)), Reference(Metadata { clean: false, etype: None }, UserName(\"y\")), Constant(Metadata { clean: false, etype: None }, Int(25))], Constant(Metadata { clean: false, etype: None }, Int(100)))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"partial_evaluator\", to Expression: SumEq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Constant(Metadata { clean: false, etype: None }, Int(10)), Reference(Metadata { clean: false, etype: None }, UserName(\"y\")), Constant(Metadata { clean: false, etype: None }, Int(25))], Constant(Metadata { clean: false, etype: None }, Int(100))), resulting in: SumEq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Reference(Metadata { clean: false, etype: None }, UserName(\"y\"))], Constant(Metadata { clean: false, etype: None }, Int(65)))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"sumeq_to_minion\", to Expression: SumEq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Reference(Metadata { clean: false, etype: None }, UserName(\"y\"))], Constant(Metadata { clean: false, etype: None }, Int(65))), resulting in: And(Metadata { clean: false, etype: None }, [SumGeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Reference(Metadata { clean: false, etype: None }, UserName(\"y\"))], Constant(Metadata { clean: false, etype: None }, Int(65))), SumLeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"x\")), Reference(Metadata { clean: false, etype: None }, UserName(\"y\"))], Constant(Metadata { clean: false, etype: None }, Int(65)))])","target":"rule_engine"}
