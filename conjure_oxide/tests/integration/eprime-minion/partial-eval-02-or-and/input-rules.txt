[1mtest_span[0m[2m:[0m hello
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "unwrap_nested_and", application: 0x558bb68e0a30, rule_sets: [("Base", 8800)] }, to Expression: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Bool(false))]), Or(Metadata { clean: false, etype: None }, [AllDiff(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(1)), Constant(Metadata { clean: false, etype: None }, Int(2)), Constant(Metadata { clean: false, etype: None }, Int(3))]), Constant(Metadata { clean: false, etype: None }, Bool(true))]), And(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("c")), Constant(Metadata { clean: false, etype: None }, Bool(true))])]), resulting in: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Bool(false))]), Or(Metadata { clean: false, etype: None }, [AllDiff(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(1)), Constant(Metadata { clean: false, etype: None }, Int(2)), Constant(Metadata { clean: false, etype: None }, Int(3))]), Constant(Metadata { clean: false, etype: None }, Bool(true))]), Reference(Metadata { clean: false, etype: None }, UserName("c")), Constant(Metadata { clean: false, etype: None }, Bool(true))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "partial_evaluator", application: 0x558bb68ea060, rule_sets: [("Base", 9000)] }, to Expression: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Bool(false))]), Or(Metadata { clean: false, etype: None }, [AllDiff(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(1)), Constant(Metadata { clean: false, etype: None }, Int(2)), Constant(Metadata { clean: false, etype: None }, Int(3))]), Constant(Metadata { clean: false, etype: None }, Bool(true))]), Reference(Metadata { clean: false, etype: None }, UserName("c")), Constant(Metadata { clean: false, etype: None }, Bool(true))]), resulting in: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Bool(false))]), Or(Metadata { clean: false, etype: None }, [AllDiff(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(1)), Constant(Metadata { clean: false, etype: None }, Int(2)), Constant(Metadata { clean: false, etype: None }, Int(3))]), Constant(Metadata { clean: false, etype: None }, Bool(true))]), Reference(Metadata { clean: false, etype: None }, UserName("c"))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "boolean_literal_to_wliteral", application: 0x558bb68e91a0, rule_sets: [("Minion", 4100)] }, to Expression: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Bool(false))]), Or(Metadata { clean: false, etype: None }, [AllDiff(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(1)), Constant(Metadata { clean: false, etype: None }, Int(2)), Constant(Metadata { clean: false, etype: None }, Int(3))]), Constant(Metadata { clean: false, etype: None }, Bool(true))]), Reference(Metadata { clean: false, etype: None }, UserName("c")), Constant(Metadata { clean: false, etype: None }, Bool(true))]), resulting in: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Bool(false))]), Or(Metadata { clean: false, etype: None }, [AllDiff(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(1)), Constant(Metadata { clean: false, etype: None }, Int(2)), Constant(Metadata { clean: false, etype: None }, Int(3))]), Constant(Metadata { clean: false, etype: None }, Bool(true))]), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("c"), Bool(true)), Constant(Metadata { clean: false, etype: None }, Bool(true))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "remove_constants_from_and", application: 0x558bb68e14e0, rule_sets: [("Base", 100)] }, to Expression: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Bool(false))]), Or(Metadata { clean: false, etype: None }, [AllDiff(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(1)), Constant(Metadata { clean: false, etype: None }, Int(2)), Constant(Metadata { clean: false, etype: None }, Int(3))]), Constant(Metadata { clean: false, etype: None }, Bool(true))]), Reference(Metadata { clean: false, etype: None }, UserName("c")), Constant(Metadata { clean: false, etype: None }, Bool(true))]), resulting in: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Bool(false))]), Or(Metadata { clean: false, etype: None }, [AllDiff(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(1)), Constant(Metadata { clean: false, etype: None }, Int(2)), Constant(Metadata { clean: false, etype: None }, Int(3))]), Constant(Metadata { clean: false, etype: None }, Bool(true))]), Reference(Metadata { clean: false, etype: None }, UserName("c"))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "boolean_literal_to_wliteral", application: 0x558bb68e91a0, rule_sets: [("Minion", 4100)] }, to Expression: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Bool(false))]), Or(Metadata { clean: false, etype: None }, [AllDiff(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(1)), Constant(Metadata { clean: false, etype: None }, Int(2)), Constant(Metadata { clean: false, etype: None }, Int(3))]), Constant(Metadata { clean: false, etype: None }, Bool(true))]), Reference(Metadata { clean: false, etype: None }, UserName("c"))]), resulting in: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Bool(false))]), Or(Metadata { clean: false, etype: None }, [AllDiff(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(1)), Constant(Metadata { clean: false, etype: None }, Int(2)), Constant(Metadata { clean: false, etype: None }, Int(3))]), Constant(Metadata { clean: false, etype: None }, Bool(true))]), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("c"), Bool(true))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "partial_evaluator", application: 0x558bb68ea060, rule_sets: [("Base", 9000)] }, to Expression: Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Bool(false))]), resulting in: Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))])])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "unwrap_nested_or", application: 0x558bb68e06a0, rule_sets: [("Base", 8800)] }, to Expression: Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Bool(false))]), resulting in: Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b")), Constant(Metadata { clean: false, etype: None }, Bool(false))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "remove_constants_from_or", application: 0x558bb68e1140, rule_sets: [("Base", 100)] }, to Expression: Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Bool(false))]), resulting in: Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))])])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "remove_trivial_or", application: 0x558bb68e1050, rule_sets: [("Base", 8800)] }, to Expression: Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))])]), resulting in: Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "unwrap_nested_or", application: 0x558bb68e06a0, rule_sets: [("Base", 8800)] }, to Expression: Or(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))])]), resulting in: Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "boolean_literal_to_wliteral", application: 0x558bb68e91a0, rule_sets: [("Minion", 4100)] }, to Expression: Or(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), resulting in: Or(Metadata { clean: false, etype: None }, [WatchedLiteral(Metadata { clean: false, etype: None }, UserName("a"), Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("b"), Bool(true))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "partial_evaluator", application: 0x558bb68ea060, rule_sets: [("Base", 9000)] }, to Expression: Or(Metadata { clean: false, etype: None }, [AllDiff(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(1)), Constant(Metadata { clean: false, etype: None }, Int(2)), Constant(Metadata { clean: false, etype: None }, Int(3))]), Constant(Metadata { clean: false, etype: None }, Bool(true))]), resulting in: Constant(Metadata { clean: false, etype: None }, Bool(true))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "remove_constants_from_or", application: 0x558bb68e1140, rule_sets: [("Base", 100)] }, to Expression: Or(Metadata { clean: false, etype: None }, [AllDiff(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(1)), Constant(Metadata { clean: false, etype: None }, Int(2)), Constant(Metadata { clean: false, etype: None }, Int(3))]), Constant(Metadata { clean: false, etype: None }, Bool(true))]), resulting in: Constant(Metadata { clean: false, etype: None }, Bool(true))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "partial_evaluator", application: 0x558bb68ea060, rule_sets: [("Base", 9000)] }, to Expression: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [WatchedLiteral(Metadata { clean: false, etype: None }, UserName("a"), Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("b"), Bool(true))]), Constant(Metadata { clean: false, etype: None }, Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("c"), Bool(true))]), resulting in: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [WatchedLiteral(Metadata { clean: false, etype: None }, UserName("a"), Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("b"), Bool(true))]), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("c"), Bool(true))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "remove_constants_from_and", application: 0x558bb68e14e0, rule_sets: [("Base", 100)] }, to Expression: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [WatchedLiteral(Metadata { clean: false, etype: None }, UserName("a"), Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("b"), Bool(true))]), Constant(Metadata { clean: false, etype: None }, Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("c"), Bool(true))]), resulting in: And(Metadata { clean: false, etype: None }, [Or(Metadata { clean: false, etype: None }, [WatchedLiteral(Metadata { clean: false, etype: None }, UserName("a"), Bool(true)), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("b"), Bool(true))]), WatchedLiteral(Metadata { clean: false, etype: None }, UserName("c"), Bool(true))])
