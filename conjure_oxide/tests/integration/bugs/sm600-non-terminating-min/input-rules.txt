[1mtest_span[0m[2m:[0m hello
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "sum_leq_to_sumleq", application: 0x558bb68e5a80, rule_sets: [("Minion", 4400)] }, to Expression: Leq(Metadata { clean: false, etype: None }, Sum(Metadata { clean: false, etype: None }, [Min(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(6))]), Constant(Metadata { clean: false, etype: None }, Int(10))), resulting in: SumLeq(Metadata { clean: false, etype: None }, [Min(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(6))], Constant(Metadata { clean: false, etype: None }, Int(10)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "leq_to_ineq", application: 0x558bb68e7110, rule_sets: [("Minion", 4100)] }, to Expression: Leq(Metadata { clean: false, etype: None }, Sum(Metadata { clean: false, etype: None }, [Min(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(6))]), Constant(Metadata { clean: false, etype: None }, Int(10))), resulting in: Ineq(Metadata { clean: false, etype: None }, Sum(Metadata { clean: false, etype: None }, [Min(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(6))]), Constant(Metadata { clean: false, etype: None }, Int(10)), Constant(Metadata { clean: false, etype: None }, Int(0)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "partial_evaluator", application: 0x558bb68ea060, rule_sets: [("Base", 9000)] }, to Expression: SumLeq(Metadata { clean: false, etype: None }, [Min(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), Constant(Metadata { clean: false, etype: None }, Int(6))], Constant(Metadata { clean: false, etype: None }, Int(10))), resulting in: SumLeq(Metadata { clean: false, etype: None }, [Min(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))])], Constant(Metadata { clean: false, etype: None }, Int(4)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "min_to_var", application: 0x558bb68e19f0, rule_sets: [("Base", 2000)] }, to Expression: Min(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))]), resulting in: Reference(Metadata { clean: false, etype: None }, MachineName(0))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "unwrap_nested_and", application: 0x558bb68e0a30, rule_sets: [("Base", 8800)] }, to Expression: And(Metadata { clean: false, etype: None }, [SumLeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(0))], Constant(Metadata { clean: false, etype: None }, Int(4))), And(Metadata { clean: false, etype: None }, [Leq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Leq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])])]), resulting in: And(Metadata { clean: false, etype: None }, [SumLeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, MachineName(0))], Constant(Metadata { clean: false, etype: None }, Int(4))), Leq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Leq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")))])])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "leq_to_ineq", application: 0x558bb68e7110, rule_sets: [("Minion", 4100)] }, to Expression: Leq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("a")), Constant(Metadata { clean: false, etype: None }, Int(0)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "leq_to_ineq", application: 0x558bb68e7110, rule_sets: [("Minion", 4100)] }, to Expression: Leq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName("b")), Constant(Metadata { clean: false, etype: None }, Int(0)))
