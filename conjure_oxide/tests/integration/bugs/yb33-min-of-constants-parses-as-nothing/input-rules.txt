[1mtest_span[0m[2m:[0m hello
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "sum_leq_to_sumleq", application: 0x558bb68e5a80, rule_sets: [("Minion", 4400)] }, to Expression: Leq(Metadata { clean: false, etype: None }, Sum(Metadata { clean: false, etype: None }, [Min(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(5)), Constant(Metadata { clean: false, etype: None }, Int(7))]), Reference(Metadata { clean: false, etype: None }, UserName("c"))]), Constant(Metadata { clean: false, etype: None }, Int(10))), resulting in: SumLeq(Metadata { clean: false, etype: None }, [Min(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(5)), Constant(Metadata { clean: false, etype: None }, Int(7))]), Reference(Metadata { clean: false, etype: None }, UserName("c"))], Constant(Metadata { clean: false, etype: None }, Int(10)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "leq_to_ineq", application: 0x558bb68e7110, rule_sets: [("Minion", 4100)] }, to Expression: Leq(Metadata { clean: false, etype: None }, Sum(Metadata { clean: false, etype: None }, [Min(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(5)), Constant(Metadata { clean: false, etype: None }, Int(7))]), Reference(Metadata { clean: false, etype: None }, UserName("c"))]), Constant(Metadata { clean: false, etype: None }, Int(10))), resulting in: Ineq(Metadata { clean: false, etype: None }, Sum(Metadata { clean: false, etype: None }, [Min(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(5)), Constant(Metadata { clean: false, etype: None }, Int(7))]), Reference(Metadata { clean: false, etype: None }, UserName("c"))]), Constant(Metadata { clean: false, etype: None }, Int(10)), Constant(Metadata { clean: false, etype: None }, Int(0)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "apply_eval_constant", application: 0x558bb68e56a0, rule_sets: [("Constant", 9001)] }, to Expression: Min(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(5)), Constant(Metadata { clean: false, etype: None }, Int(7))]), resulting in: Constant(Metadata { clean: false, etype: None }, Int(5))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "partial_evaluator", application: 0x558bb68ea060, rule_sets: [("Base", 9000)] }, to Expression: Min(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(5)), Constant(Metadata { clean: false, etype: None }, Int(7))]), resulting in: Min(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(5))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "min_to_var", application: 0x558bb68e19f0, rule_sets: [("Base", 2000)] }, to Expression: Min(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(5)), Constant(Metadata { clean: false, etype: None }, Int(7))]), resulting in: Reference(Metadata { clean: false, etype: None }, MachineName(0))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "partial_evaluator", application: 0x558bb68ea060, rule_sets: [("Base", 9000)] }, to Expression: SumLeq(Metadata { clean: false, etype: None }, [Constant(Metadata { clean: false, etype: None }, Int(5)), Reference(Metadata { clean: false, etype: None }, UserName("c"))], Constant(Metadata { clean: false, etype: None }, Int(10))), resulting in: SumLeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("c"))], Constant(Metadata { clean: false, etype: None }, Int(5)))
