{"level":"TRACE","message":"Rule applied: \"leq_to_ineq\", to Expression: Leq(Metadata { clean: false, etype: None }, Max(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Literal(Int(2))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\")))]), FactorE(Metadata { clean: false, etype: None }, Literal(Int(2)))), resulting in: Ineq(Metadata { clean: false, etype: None }, Max(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Literal(Int(2))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\")))]), FactorE(Metadata { clean: false, etype: None }, Literal(Int(2))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0))))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"max_to_var\", to Expression: Max(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Literal(Int(2))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\")))]), resulting in: FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0)))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"unwrap_nested_and\", to Expression: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(2))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0)))), And(Metadata { clean: false, etype: None }, [Geq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(2)))), Geq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\")))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(2)))), Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))))])])]), resulting in: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(2))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0)))), Geq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(2)))), Geq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\")))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(2)))), Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))))])])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"geq_to_ineq\", to Expression: Geq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(2)))), resulting in: Ineq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Literal(Int(2))), FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0))))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"geq_to_ineq\", to Expression: Geq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\")))), resulting in: Ineq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0))))","target":"rule_engine"}
