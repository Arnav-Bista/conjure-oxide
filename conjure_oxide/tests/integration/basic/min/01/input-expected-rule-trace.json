{"level":"TRACE","message":"Rule applied: \"geq_to_ineq\", to Expression: Geq(Metadata { clean: false, etype: None }, Min(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"a\")), Reference(Metadata { clean: false, etype: None }, UserName(\"b\"))]), Constant(Metadata { clean: false, etype: None }, Int(3))), resulting in: Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(3)), Min(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"a\")), Reference(Metadata { clean: false, etype: None }, UserName(\"b\"))]), Constant(Metadata { clean: false, etype: None }, Int(0)))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"min_to_var\", to Expression: Min(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName(\"a\")), Reference(Metadata { clean: false, etype: None }, UserName(\"b\"))]), resulting in: Reference(Metadata { clean: false, etype: None }, MachineName(0))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"unwrap_nested_and\", to Expression: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(3)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), And(Metadata { clean: false, etype: None }, [Leq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName(\"a\"))), Leq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName(\"b\"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName(\"a\"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName(\"b\")))])])]), resulting in: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, Constant(Metadata { clean: false, etype: None }, Int(3)), Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(0))), Leq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName(\"a\"))), Leq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName(\"b\"))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName(\"a\"))), Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName(\"b\")))])])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"leq_to_ineq\", to Expression: Leq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName(\"a\"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName(\"a\")), Constant(Metadata { clean: false, etype: None }, Int(0)))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"leq_to_ineq\", to Expression: Leq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName(\"b\"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Reference(Metadata { clean: false, etype: None }, UserName(\"b\")), Constant(Metadata { clean: false, etype: None }, Int(0)))","target":"rule_engine"}
