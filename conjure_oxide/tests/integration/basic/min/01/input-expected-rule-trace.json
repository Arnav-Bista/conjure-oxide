{"level":"TRACE","message":"Rule applied: \"geq_to_ineq\", to Expression: Geq(Metadata { clean: false, etype: None }, Min(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\")))]), FactorE(Metadata { clean: false, etype: None }, Literal(Int(3)))), resulting in: Ineq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Literal(Int(3))), Min(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\")))]), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0))))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"min_to_var\", to Expression: Min(Metadata { clean: false, etype: None }, [FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\")))]), resulting in: FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0)))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"unwrap_nested_and\", to Expression: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Literal(Int(3))), FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0)))), And(Metadata { clean: false, etype: None }, [Leq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\")))), Leq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\")))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\")))), Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))))])])]), resulting in: And(Metadata { clean: false, etype: None }, [Ineq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Literal(Int(3))), FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0)))), Leq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\")))), Leq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\")))), Or(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\")))), Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))))])])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"leq_to_ineq\", to Expression: Leq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\")))), resulting in: Ineq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0))))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"leq_to_ineq\", to Expression: Leq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\")))), resulting in: Ineq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(MachineName(0))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0))))","target":"rule_engine"}
