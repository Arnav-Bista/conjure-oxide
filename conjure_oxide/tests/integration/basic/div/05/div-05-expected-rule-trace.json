[
  {
    "rule_applied": "div_to_bubble ([(\\\"Bubble\\\", 6000)])",
    "initial_expression": "UnsafeDiv(b, c)",
    "tranformed_expression": "{SafeDiv(b, c) @ (c != 0)}",
    "new_top": "[]"
  },
  {
    "rule_applied": "bubble_up ([(\\\"Bubble\\\", 8900)])",
    "initial_expression": "(a != {SafeDiv(b, c) @ (c != 0)})",
    "tranformed_expression": "{(a != SafeDiv(b, c)) @ And([(c != 0)])}",
    "new_top": "[]"
  },
  {
    "rule_applied": "expand_bubble ([(\\\"Bubble\\\", 8900)])",
    "initial_expression": "{(a != SafeDiv(b, c)) @ And([(c != 0)])}",
    "tranformed_expression": "And([(a != SafeDiv(b, c)), And([(c != 0)])])",
    "new_top": "[]"
  },
  {
    "rule_applied": "remove_unit_vector_and ([(\\\"Base\\\", 8800)])",
    "initial_expression": "And([(c != 0)])",
    "tranformed_expression": "(c != 0)",
    "new_top": "[]"
  },
  {
    "rule_applied": "flatten_binop ([(\\\"Minion\\\", 4400)])",
    "initial_expression": "(a != SafeDiv(b, c))",
    "tranformed_expression": "(a != __0)",
    "new_top": "[__0 =aux SafeDiv(b, c)]"
  },
  {
    "rule_applied": "introduce_diveq ([(\\\"Minion\\\", 4200)])",
    "initial_expression": "__0 =aux SafeDiv(b, c)",
    "tranformed_expression": "DivEq(b, c, __0)",
    "new_top": "[]"
  },
  {
    "Number of rules applied": 6
  }
]