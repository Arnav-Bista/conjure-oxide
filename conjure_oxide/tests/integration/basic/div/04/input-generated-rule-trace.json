{"level":"TRACE","message":"Rule applied: \"not_constraint_to_reify\", to Expression: Not(Metadata { clean: false, etype: None }, Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), UnsafeDiv(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))))), resulting in: Reify(Metadata { clean: false, etype: None }, Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), UnsafeDiv(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))))), FactorE(Metadata { clean: false, etype: None }, Literal(Bool(false))))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"div_to_bubble\", to Expression: UnsafeDiv(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), resulting in: Bubble(Metadata { clean: false, etype: None }, SafeDiv(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), Neq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0)))))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"bubble_up\", to Expression: Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), Bubble(Metadata { clean: false, etype: None }, SafeDiv(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\")))), Neq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0)))))), resulting in: Bubble(Metadata { clean: false, etype: None }, Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), SafeDiv(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))))), And(Metadata { clean: false, etype: None }, [Neq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0))))]))","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"expand_bubble\", to Expression: Bubble(Metadata { clean: false, etype: None }, Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), SafeDiv(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))))), And(Metadata { clean: false, etype: None }, [Neq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0))))])), resulting in: And(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), SafeDiv(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))))), And(Metadata { clean: false, etype: None }, [Neq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0))))])])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"unwrap_nested_and\", to Expression: And(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), SafeDiv(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))))), And(Metadata { clean: false, etype: None }, [Neq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0))))])]), resulting in: And(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), SafeDiv(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))))), Neq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))), FactorE(Metadata { clean: false, etype: None }, Literal(Int(0))))])","target":"rule_engine"}
{"level":"TRACE","message":"Rule applied: \"div_eq_to_diveq\", to Expression: Eq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))), SafeDiv(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))))), resulting in: DivEq(Metadata { clean: false, etype: None }, FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"b\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"c\"))), FactorE(Metadata { clean: false, etype: None }, Reference(UserName(\"a\"))))","target":"rule_engine"}
