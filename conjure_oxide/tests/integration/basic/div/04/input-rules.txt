[1mtest_span[0m[2m:[0m hello
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "not_constraint_to_reify", application: 0x558bb68e9db0, rule_sets: [("Minion", 4090)] }, to Expression: Not(Metadata { clean: false, etype: None }, Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), UnsafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("c"))))), resulting in: Reify(Metadata { clean: false, etype: None }, Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), UnsafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("c")))), Constant(Metadata { clean: false, etype: None }, Bool(false)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "div_to_bubble", application: 0x558bb68e5220, rule_sets: [("Bubble", 6000)] }, to Expression: UnsafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("c"))), resulting in: Bubble(Metadata { clean: false, etype: None }, SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("c"))), Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c")), Constant(Metadata { clean: false, etype: None }, Int(0))))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "bubble_up", application: 0x558bb68e4a30, rule_sets: [("Bubble", 8900)] }, to Expression: Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Bubble(Metadata { clean: false, etype: None }, SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("c"))), Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c")), Constant(Metadata { clean: false, etype: None }, Int(0))))), resulting in: Bubble(Metadata { clean: false, etype: None }, Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("c")))), And(Metadata { clean: false, etype: None }, [Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c")), Constant(Metadata { clean: false, etype: None }, Int(0)))]))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "expand_bubble", application: 0x558bb68e4610, rule_sets: [("Bubble", 8900)] }, to Expression: Bubble(Metadata { clean: false, etype: None }, Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("c")))), And(Metadata { clean: false, etype: None }, [Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c")), Constant(Metadata { clean: false, etype: None }, Int(0)))])), resulting in: And(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("c")))), And(Metadata { clean: false, etype: None }, [Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c")), Constant(Metadata { clean: false, etype: None }, Int(0)))])])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "unwrap_nested_and", application: 0x558bb68e0a30, rule_sets: [("Base", 8800)] }, to Expression: And(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("c")))), And(Metadata { clean: false, etype: None }, [Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c")), Constant(Metadata { clean: false, etype: None }, Int(0)))])]), resulting in: And(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("c")))), Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("c")), Constant(Metadata { clean: false, etype: None }, Int(0)))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "div_eq_to_diveq", application: 0x558bb68e8900, rule_sets: [("Minion", 4400)] }, to Expression: Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("c")))), resulting in: DivEq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("c")), Reference(Metadata { clean: false, etype: None }, UserName("a")))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "flatten_safediv", application: 0x558bb68e7b80, rule_sets: [("Minion", 4400)] }, to Expression: Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Reference(Metadata { clean: false, etype: None }, UserName("c")))), resulting in: Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, MachineName(0)))
