[1mtest_span[0m[2m:[0m hello
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "div_to_bubble", application: 0x558bb68e5220, rule_sets: [("Bubble", 6000)] }, to Expression: UnsafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))), resulting in: Bubble(Metadata { clean: false, etype: None }, SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Constant(Metadata { clean: false, etype: None }, Int(0))))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "bubble_up", application: 0x558bb68e4a30, rule_sets: [("Bubble", 8900)] }, to Expression: Eq(Metadata { clean: false, etype: None }, Bubble(Metadata { clean: false, etype: None }, SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Constant(Metadata { clean: false, etype: None }, Int(0)))), Constant(Metadata { clean: false, etype: None }, Int(1))), resulting in: Bubble(Metadata { clean: false, etype: None }, Eq(Metadata { clean: false, etype: None }, SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Constant(Metadata { clean: false, etype: None }, Int(1))), And(Metadata { clean: false, etype: None }, [Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Constant(Metadata { clean: false, etype: None }, Int(0)))]))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "expand_bubble", application: 0x558bb68e4610, rule_sets: [("Bubble", 8900)] }, to Expression: Bubble(Metadata { clean: false, etype: None }, Eq(Metadata { clean: false, etype: None }, SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Constant(Metadata { clean: false, etype: None }, Int(1))), And(Metadata { clean: false, etype: None }, [Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Constant(Metadata { clean: false, etype: None }, Int(0)))])), resulting in: And(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Constant(Metadata { clean: false, etype: None }, Int(1))), And(Metadata { clean: false, etype: None }, [Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Constant(Metadata { clean: false, etype: None }, Int(0)))])])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "unwrap_nested_and", application: 0x558bb68e0a30, rule_sets: [("Base", 8800)] }, to Expression: And(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Constant(Metadata { clean: false, etype: None }, Int(1))), And(Metadata { clean: false, etype: None }, [Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Constant(Metadata { clean: false, etype: None }, Int(0)))])]), resulting in: And(Metadata { clean: false, etype: None }, [Eq(Metadata { clean: false, etype: None }, SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Constant(Metadata { clean: false, etype: None }, Int(1))), Neq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("b")), Constant(Metadata { clean: false, etype: None }, Int(0)))])
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "div_eq_to_diveq", application: 0x558bb68e8900, rule_sets: [("Minion", 4400)] }, to Expression: Eq(Metadata { clean: false, etype: None }, SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Constant(Metadata { clean: false, etype: None }, Int(1))), resulting in: DivEq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b")), Constant(Metadata { clean: false, etype: None }, Int(1)))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "flatten_safediv", application: 0x558bb68e7b80, rule_sets: [("Minion", 4400)] }, to Expression: Eq(Metadata { clean: false, etype: None }, SafeDiv(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, UserName("a")), Reference(Metadata { clean: false, etype: None }, UserName("b"))), Constant(Metadata { clean: false, etype: None }, Int(1))), resulting in: Eq(Metadata { clean: false, etype: None }, Reference(Metadata { clean: false, etype: None }, MachineName(0)), Constant(Metadata { clean: false, etype: None }, Int(1)))
