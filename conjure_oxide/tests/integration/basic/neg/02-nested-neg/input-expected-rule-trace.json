[
  {
    "rule_applied": "div_to_bubble ([(\\\"Bubble\\\", 6000)])",
    "initial_expression": "UnsafeDiv(-(y), z)",
    "tranformed_expression": "{SafeDiv(-(y), z) @ (z != 0)}",
    "new_top": "[]"
  },
  {
    "rule_applied": "bubble_up ([(\\\"Bubble\\\", 8900)])",
    "initial_expression": "(x = {SafeDiv(-(y), z) @ (z != 0)})",
    "tranformed_expression": "{(x = SafeDiv(-(y), z)) @ And([(z != 0)])}",
    "new_top": "[]"
  },
  {
    "rule_applied": "expand_bubble ([(\\\"Bubble\\\", 8900)])",
    "initial_expression": "{(x = SafeDiv(-(y), z)) @ And([(z != 0)])}",
    "tranformed_expression": "And([(x = SafeDiv(-(y), z)), And([(z != 0)])])",
    "new_top": "[]"
  },
  {
    "rule_applied": "remove_unit_vector_and ([(\\\"Base\\\", 8800)])",
    "initial_expression": "And([(z != 0)])",
    "tranformed_expression": "(z != 0)",
    "new_top": "[]"
  },
  {
    "rule_applied": "flatten_binop ([(\\\"Minion\\\", 4400)])",
    "initial_expression": "SafeDiv(-(y), z)",
    "tranformed_expression": "SafeDiv(__0, z)",
    "new_top": "[__0 =aux -(y)]"
  },
  {
    "rule_applied": "introduce_minuseq_from_aux_decl ([(\\\"Minion\\\", 4400)])",
    "initial_expression": "__0 =aux -(y)",
    "tranformed_expression": "MinusEq(__0,y)",
    "new_top": "[]"
  },
  {
    "rule_applied": "introduce_diveq ([(\\\"Minion\\\", 4200)])",
    "initial_expression": "(x = SafeDiv(__0, z))",
    "tranformed_expression": "DivEq(__0, z, x)",
    "new_top": "[]"
  },
  {
    "Number of rules applied": 7
  }
]