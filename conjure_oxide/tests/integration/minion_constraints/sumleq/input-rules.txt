[1mtest_span[0m[2m:[0m hello
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "sum_leq_to_sumleq", application: 0x558bb68e5a80, rule_sets: [("Minion", 4400)] }, to Expression: Leq(Metadata { clean: false, etype: None }, Sum(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("x")), Reference(Metadata { clean: false, etype: None }, UserName("y"))]), Reference(Metadata { clean: false, etype: None }, UserName("z"))), resulting in: SumLeq(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("x")), Reference(Metadata { clean: false, etype: None }, UserName("y"))], Reference(Metadata { clean: false, etype: None }, UserName("z")))
[1mtest_span[0m[2m:[0m Rule applicable: Rule { name: "leq_to_ineq", application: 0x558bb68e7110, rule_sets: [("Minion", 4100)] }, to Expression: Leq(Metadata { clean: false, etype: None }, Sum(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("x")), Reference(Metadata { clean: false, etype: None }, UserName("y"))]), Reference(Metadata { clean: false, etype: None }, UserName("z"))), resulting in: Ineq(Metadata { clean: false, etype: None }, Sum(Metadata { clean: false, etype: None }, [Reference(Metadata { clean: false, etype: None }, UserName("x")), Reference(Metadata { clean: false, etype: None }, UserName("y"))]), Reference(Metadata { clean: false, etype: None }, UserName("z")), Constant(Metadata { clean: false, etype: None }, Int(0)))
